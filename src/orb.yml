version: 2.1

description: Orb for building and testing rebar3 projects.

examples:
  common_test:
    description: |
      Run common test suites of project. Be sure to add `{ct_opts, [{ct_hooks, [cth_surefire]}]}.` to your project's `rebar.config` so JUnit XML metadata for the test results is able to be collected and used by CircleCI.

      The hex package cache `~/.cache/rebar3/hex`, dialyzer plt, default lib and plugins directories (under `_build/default/`) are cached for future runs. The cache keys have an environment variable `$CACHE_VERSION` appended to them so that you can clear the cache by incrementing (really just changing it to anything different) the value.
    usage:
      version: 2.1

      orbs:
        rebar3: tsloughter/rebar3@0.6.4

      workflows:
        build-test:
          jobs:
            - rebar3/compile
            - rebar3/lint:
                requires:
                  - rebar3/compile
            - rebar3/xref:
                requires:
                  - rebar3/compile
            - rebar3/dialyzer:
                requires:
                  - rebar3/compile
            - rebar3/ct:
                requires:
                  - rebar3/compile
            - rebar3/cover:
                requires:
                  - rebar3/ct

executors:
  erlang:
    parameters:
      image:
        description: The Erlang/OTP docker image to use.
        type: string
        default: "circleci/erlang"
      tag:
        description: The docker tag to use.
        type: string
        default: "22.0.3"
    docker:
      - image: <<parameters.image>>:<<parameters.tag>>
        entrypoint: ["/bin/sh"]

commands:
  with_deps_cache:
    description: |
      Run steps with the dependency cache restored and then save it again if changed.
    parameters:
      steps:
        type: steps
      cache_key_postfix:
        type: string
        default: ""
    steps:
      - restore_cache:
          keys:
            - rebar-lock-{{ checksum "rebar.lock" }}<<parameters.cache_key_postfix>>-{{ .Environment.OTP_VERSION }}-{{ .Environment.CACHE_VERSION }}
            - hex-packages-{{ .Environment.CACHE_VERSION }}

      - steps: <<parameters.steps>>

      - save_cache:
          key: rebar-lock-{{ checksum "rebar.lock" }}<<parameters.cache_key_postfix>>-{{ .Environment.OTP_VERSION }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/project/_build/default/lib
            - ~/project/_build/default/plugins

      - save_cache:
          key: hex-packages-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/.cache/rebar3/hex/default/packages

  with_plt_cache:
    description: |
      Run steps with the plt cache restored and then save it again.
    parameters:
      steps:
        type: steps
    steps:
      - restore_cache:
          keys:
            - erlang-plt-{{ checksum "rebar.lock" }}-{{ .Environment.OTP_VERSION }}-{{ .Environment.CACHE_VERSION }}

      - steps: << parameters.steps >>

      - save_cache:
          # need a better key to use since it should be based on the otp version as well
          key: erlang-plt-{{ checksum "rebar.lock" }}-{{ .Environment.OTP_VERSION }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - ~/project/_build/default/rebar3_*_plt
            - ~/.cache/rebar3/rebar3_*_plt

  on_fail_store_crashdump:
    description: |
      If a job fails this command will copy the rebar3 crashdump file to the artifacts store so you can view it after a failed job.
    parameters:
      cmd:
        description: A unique name, like the command that is running, in case there are multiple dumps.
        type: string
    steps:
      - store_artifacts:
          path: ~/project/rebar3.crashdump
          destination: <<parameters.cmd>>_rebar3_crashdump.txt
          when: on_fail

  compile:
    description: |
      Compile the project.
    steps:
      - run:
          command: rebar3 compile

  dialyzer:
    description: |
      Run dialyzer.
    steps:
      - run:
          command: rebar3 dialyzer

  xref:
    description: |
      Run xref.
    steps:
      - run:
          command: rebar3 xref
  ct:
    description: |
      Run common test suites.
    steps:
      - run:
          command: rebar3 ct

  eunit:
    description: |
      Run eunit tests.
    steps:
      - run:
          command: rebar3 eunit

  lint:
    description: |
      Lints with elvis.
    steps:
      - run:
          command: rebar3 lint

  cover:
    description: |
      Run cover.
    steps:
      - run:
          command: rebar3 cover

setup: &setup
  parameters:
    executor:
      description: The executor to use for this job.
      type: executor
      default: erlang
  executor: <<parameters.executor>>

jobs:
  compile:
    <<: *setup
    steps:
      - checkout
      - with_deps_cache:
          steps:
            - compile
      - on_fail_store_crashdump:
          cmd: compile
  lint:
    <<: *setup
    steps:
      - checkout
      - with_deps_cache:
          steps:
            - lint
      - on_fail_store_crashdump:
          cmd: lint
  eunit:
    <<: *setup
    steps:
      - checkout
      - with_deps_cache:
          steps:
            - eunit
      - on_fail_store_crashdump:
          cmd: eunit
      # for cover
      - persist_to_workspace:
          root: ~/project/
          paths:
            - _build/test/
  dialyzer:
    <<: *setup
    steps:
      - checkout
      - with_deps_cache:
          steps:
            - with_plt_cache:
                steps:
                  - dialyzer
      - on_fail_store_crashdump:
          cmd: dialyzer
  xref:
    <<: *setup
    steps:
      - checkout
      - with_deps_cache:
          steps:
            - xref
      - on_fail_store_crashdump:
          cmd: xref
  ct:
    <<: *setup
    steps:
      - checkout
      - with_deps_cache:
          steps:
            - ct
      - on_fail_store_crashdump:
          cmd: ct
      - store_test_results:
          path: ~/project/_build/test/logs/
      - store_artifacts:
          path: ~/project/_build/test/logs
          destination: common_test

      # for cover
      - persist_to_workspace:
          root: ~/project/
          paths:
            - _build/test/
  cover:
    <<: *setup
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - with_deps_cache:
          steps:
            - cover
      - persist_to_workspace:
          root: ~/project/
          paths:
            - _build/test/
      - on_fail_store_crashdump:
          cmd: cover
      - store_artifacts:
          path: ~/project/_build/test/cover
          destination: cover
